/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"

#include "calendar.h"

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef       void(*createEvent_t)(const char * title, const char * startDate, const char * endDate, const char * notes, const char * location, int alarmMinutes);

/**
 * struct that gets filled in by calendarRegister
 */
typedef struct calendarFuncs
{
    createEvent_t m_createEvent;
} calendarFuncs;

static calendarFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0x74878ff, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE, "error loading extension: calendar");
        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0x74878ff, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool calendarAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

void createEvent(const char * title, const char * startDate, const char * endDate, const char * notes, const char * location, int alarmMinutes)
{
    IwTrace(CALENDAR_VERBOSE, ("calling calendar[0] func: createEvent"));

    if (!_extLoad())
        return;

    g_Ext.m_createEvent(title, startDate, endDate, notes, location, alarmMinutes);
}
